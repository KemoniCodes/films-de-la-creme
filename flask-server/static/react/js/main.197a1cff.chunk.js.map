{"version":3,"sources":["img/food-and-restaurant.png","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","state","loading","movie","fetch","response","json","data","this","setState","results","className","id","src","require","alt","title","release_date","vote_average","vote_count","overview","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,0C,sICkD5BC,G,iNA5CXC,MAAQ,CACJC,SAAS,EACTC,MAAO,I,0LAIG,gH,SACWC,MADX,iH,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACJC,KAAKC,SAAS,CAAEN,MAAOI,EAAKG,QAAQ,GAAIR,SAAS,I,qIAKjD,OAEI,yBAAKS,UAAU,QACX,6BACI,4BACI,oCACA,sCACA,wCACA,wBAAIC,GAAG,QACH,yBAAKC,IAAKC,EAAQ,IAAmCC,IAAI,MAE7D,sCACA,uCACA,wBAAIH,GAAG,QAAP,aAIR,yBAAKD,UAAU,uBACX,wBAAIA,UAAU,SAASH,KAAKP,MAAME,MAAMa,MAAxC,IAA+C,0BAAML,UAAU,QAAhB,KAA0BH,KAAKP,MAAME,MAAMc,aAA3C,MAA/C,KACA,4BAAKT,KAAKP,MAAME,MAAMe,aAAtB,OAAwCV,KAAKP,MAAME,MAAMgB,WAAzD,YAEA,2BAAIX,KAAKP,MAAME,MAAMiB,gB,GApCtBC,IAAMC,YCQVC,MARf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,QCIca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"js/main.197a1cff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/food-and-restaurant.aa9501df.png\";","import React from 'react'\nimport '../css/App.css'\n\n\n\nclass Home extends React.Component {\n    state = {\n        loading: true,\n        movie: []\n    }\n\n    async componentDidMount() {\n        let url = \"https://api.themoviedb.org/3/movie/now_playing?api_key=57a856481fc55fc8549e5927b0aaa154&language=en-US&page=1\";\n        let response = await fetch(url);\n        let data = await response.json();\n        this.setState({ movie: data.results[4], loading: false })\n    }\n\n    render() {\n\n        return (\n\n            <div className=\"home\">\n                <nav>\n                    <ul>\n                        <li>HOME</li>\n                        <li>MOVIES</li>\n                        <li>TV SHOWS</li>\n                        <li id=\"logo\">\n                            <img src={require(\"../img/food-and-restaurant.png\")} alt=\"\" />\n                        </li>\n                        <li>SEARCH</li>\n                        <li>PROFILE</li>\n                        <li id=\"last\">LOG OUT</li>\n                    </ul>\n                </nav>\n\n                <div className=\"now-playing-details\">\n                    <h1 className=\"title\">{this.state.movie.title} <span className=\"date\"> ({this.state.movie.release_date}) </span> </h1>\n                    <h2>{this.state.movie.vote_average}/10 {this.state.movie.vote_count} reviews</h2>\n\n                    <p>{this.state.movie.overview}</p>\n                </div>\n\n            </div >\n\n        )\n    }\n}\n\nexport default Home\n\n\n","import React, { useEffect, setState } from 'react';\nimport Home from './components/Home';\nimport './css/App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}